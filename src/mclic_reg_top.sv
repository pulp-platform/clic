// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module mclic_reg_top #(
  parameter type reg_req_t = logic,
  parameter type reg_rsp_t = logic,
  parameter int AW = 3
) (
  input logic clk_i,
  input logic rst_ni,
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output mclic_reg_pkg::mclic_reg2hw_t reg2hw, // Write


  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import mclic_reg_pkg::* ;

  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [BlockAw-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t  reg_intf_req;
  reg_rsp_t  reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr[BlockAw-1:0];
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic [3:0] mcliccfg_mnlbits_qs;
  logic [3:0] mcliccfg_mnlbits_wd;
  logic mcliccfg_mnlbits_we;
  logic [1:0] mcliccfg_nmbits_qs;
  logic [1:0] mcliccfg_nmbits_wd;
  logic mcliccfg_nmbits_we;
  logic [3:0] mcliccfg_snlbits_qs;
  logic [3:0] mcliccfg_snlbits_wd;
  logic mcliccfg_snlbits_we;
  logic [3:0] mcliccfg_unlbits_qs;
  logic [3:0] mcliccfg_unlbits_wd;
  logic mcliccfg_unlbits_we;
  logic [3:0] mcliccfg_reserved_qs;
  logic clicmnxticonf_qs;
  logic clicmnxticonf_wd;
  logic clicmnxticonf_we;

  // Register instances
  // R[mcliccfg]: V(False)

  //   F[mnlbits]: 3:0
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_mcliccfg_mnlbits (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (mcliccfg_mnlbits_we),
    .wd     (mcliccfg_mnlbits_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mcliccfg.mnlbits.q ),

    // to register interface (read)
    .qs     (mcliccfg_mnlbits_qs)
  );


  //   F[nmbits]: 5:4
  prim_subreg #(
    .DW      (2),
    .SWACCESS("RW"),
    .RESVAL  (2'h0)
  ) u_mcliccfg_nmbits (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (mcliccfg_nmbits_we),
    .wd     (mcliccfg_nmbits_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mcliccfg.nmbits.q ),

    // to register interface (read)
    .qs     (mcliccfg_nmbits_qs)
  );


  //   F[snlbits]: 19:16
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_mcliccfg_snlbits (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (mcliccfg_snlbits_we),
    .wd     (mcliccfg_snlbits_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mcliccfg.snlbits.q ),

    // to register interface (read)
    .qs     (mcliccfg_snlbits_qs)
  );


  //   F[unlbits]: 27:24
  prim_subreg #(
    .DW      (4),
    .SWACCESS("RW"),
    .RESVAL  (4'h0)
  ) u_mcliccfg_unlbits (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (mcliccfg_unlbits_we),
    .wd     (mcliccfg_unlbits_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mcliccfg.unlbits.q ),

    // to register interface (read)
    .qs     (mcliccfg_unlbits_qs)
  );


  //   F[reserved]: 31:28
  // constant-only read
  assign mcliccfg_reserved_qs = 4'h0;


  // R[clicmnxticonf]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_clicmnxticonf (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (clicmnxticonf_we),
    .wd     (clicmnxticonf_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.clicmnxticonf.q ),

    // to register interface (read)
    .qs     (clicmnxticonf_qs)
  );




  logic [1:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[0] = (reg_addr == MCLIC_MCLICCFG_OFFSET);
    addr_hit[1] = (reg_addr == MCLIC_CLICMNXTICONF_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[0] & (|(MCLIC_PERMIT[0] & ~reg_be))) |
               (addr_hit[1] & (|(MCLIC_PERMIT[1] & ~reg_be)))));
  end

  assign mcliccfg_mnlbits_we = addr_hit[0] & reg_we & !reg_error;
  assign mcliccfg_mnlbits_wd = reg_wdata[3:0];

  assign mcliccfg_nmbits_we = addr_hit[0] & reg_we & !reg_error;
  assign mcliccfg_nmbits_wd = reg_wdata[5:4];

  assign mcliccfg_snlbits_we = addr_hit[0] & reg_we & !reg_error;
  assign mcliccfg_snlbits_wd = reg_wdata[19:16];

  assign mcliccfg_unlbits_we = addr_hit[0] & reg_we & !reg_error;
  assign mcliccfg_unlbits_wd = reg_wdata[27:24];

  assign clicmnxticonf_we = addr_hit[1] & reg_we & !reg_error;
  assign clicmnxticonf_wd = reg_wdata[0];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[3:0] = mcliccfg_mnlbits_qs;
        reg_rdata_next[5:4] = mcliccfg_nmbits_qs;
        reg_rdata_next[19:16] = mcliccfg_snlbits_qs;
        reg_rdata_next[27:24] = mcliccfg_unlbits_qs;
        reg_rdata_next[31:28] = mcliccfg_reserved_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[0] = clicmnxticonf_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule

module mclic_reg_top_intf
#(
  parameter int AW = 3,
  localparam int DW = 32
) (
  input logic clk_i,
  input logic rst_ni,
  REG_BUS.in  regbus_slave,
  // To HW
  output mclic_reg_pkg::mclic_reg2hw_t reg2hw, // Write
  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);
 localparam int unsigned STRB_WIDTH = DW/8;

`include "register_interface/typedef.svh"
`include "register_interface/assign.svh"

  // Define structs for reg_bus
  typedef logic [AW-1:0] addr_t;
  typedef logic [DW-1:0] data_t;
  typedef logic [STRB_WIDTH-1:0] strb_t;
  `REG_BUS_TYPEDEF_ALL(reg_bus, addr_t, data_t, strb_t)

  reg_bus_req_t s_reg_req;
  reg_bus_rsp_t s_reg_rsp;
  
  // Assign SV interface to structs
  `REG_BUS_ASSIGN_TO_REQ(s_reg_req, regbus_slave)
  `REG_BUS_ASSIGN_FROM_RSP(regbus_slave, s_reg_rsp)

  

  mclic_reg_top #(
    .reg_req_t(reg_bus_req_t),
    .reg_rsp_t(reg_bus_rsp_t),
    .AW(AW)
  ) i_regs (
    .clk_i,
    .rst_ni,
    .reg_req_i(s_reg_req),
    .reg_rsp_o(s_reg_rsp),
    .reg2hw, // Write
    .devmode_i
  );
  
endmodule


